#
# pkcs11shim : a PKCS#11 shim library
#
# This work is based upon OpenSC pkcs11spy (https://github.com/OpenSC/OpenSC.git)
#
# Copyright (C) 2020  Mastercard
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


ARG REPO_URL="https://github.com/Mastercard/libpkcs11shim"
ARG REPO_COMMIT_OR_TAG="HEAD"
ARG REPO_SSLVERIFY="true"
ARG DISTRO_NAME="alpine"
ARG DISTRO_VERSION="3.21"
ARG DISTRO_SHORT_NAME="alpine321"


FROM ${DISTRO_NAME}:${DISTRO_VERSION} AS base

# Enable the community and testing repositories for Alpine
RUN echo "@testing http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories

# Install required packages for building the project
# coreutils is needed for 'fmt' command
# sed is needed for string manipulation, busybox sed does not support all features
RUN apk add --no-cache \
    coreutils \
    sed \
    gawk \
    build-base \
    autoconf \
    automake \
    autoconf-archive@testing \
    libtool \
    pkgconf \
    git \
    tar \
    bash \
    gzip \
    alpine-sdk \
    sudo \
    fakeroot

FROM base AS gitcloned
ARG REPO_URL
ARG REPO_COMMIT_OR_TAG
ARG REPO_SSLVERIFY

# The meta directory is used to store the version and maintainer information
# for the RPM package
RUN mkdir -p /meta

# Clone the repository
WORKDIR /src
RUN if [ "$REPO_SSLVERIFY" != "true" ]; then git config --global http.sslVerify false; fi
RUN git clone $REPO_URL .
RUN git checkout $REPO_COMMIT_OR_TAG

# Retrieve information for building APK package later
# PGK_DESCRIPTION is omitted as it is not used in the APKBUILD
# TODO: use PKG_DESCRIPTION as description in the APKBUILD

# Retrieve the architecture
RUN PKG_ARCH=$(apk --print-arch) \
    && echo "PKG_ARCH=\"$PKG_ARCH\"" >> /meta/env

# Retrieve version information from git
# If the version is a tag, set PKG_TARVERSION to the tag, else set it to $PGK_VERSION-$PKG_RELEASE-$PKG_GITCOMMIT
RUN PKG_VERSION=$(git describe --tags | sed -E 's/^([^\-]+)(-.*)?$/\1/' ) \
    PKG_RELEASE=$(git describe --tags | sed -E 's/^([^\-]+)(-.*)?$/\2/; s/^-//; s/^$/0/; s/-(.*)//' ) \
    PKG_GITCOMMIT=$(git rev-parse --short HEAD) \
    PKG_GITSUFFIX=$(git describe --tags | sed -E 's/^([^\-]+)(-.*)?$/\2/;s/-([0-9]*)-g(.*)/~\2/') \
    && echo "PKG_GITSUFFIX=\"$PKG_GITSUFFIX\"" >> /meta/env \
    && echo "PKG_VERSION=\"$PKG_VERSION\"" >> /meta/env \
    && echo "PKG_RELEASE=\"$PKG_RELEASE\"" >> /meta/env \
    && echo "PKG_GITCOMMIT=\"$PKG_GITCOMMIT\"" >> /meta/env


# Retrieve the maintainer from git
RUN PKG_MAINTAINER=$(git log -1 --pretty=format:'%an <%ae>') \
    && echo "PKG_MAINTAINER=\"$PKG_MAINTAINER\"" >> /meta/env

RUN echo "export PKG_GITSUFFIX PKG_VERSION PKG_RELEASE PKG_GITCOMMIT PKG_MAINTAINER PKG_ARCH" >> /meta/env


FROM gitcloned AS builder

# Build the project
RUN ./bootstrap.sh \
    && ./configure --prefix=/usr \
    && make -j $(nproc) \
    && make install-strip DESTDIR=/build

# Install documentation
RUN mkdir -p /build/usr/share/doc/libpkcs11shim \
    && install -m 644 -t /build/usr/share/doc/libpkcs11shim README.md CHANGELOG.md COPYING


# Final stage
FROM builder AS final
ARG DISTRO_SHORT_NAME

RUN mkdir -p /artifacts

# build the .tar.gz file
COPY --from=builder /build /tar_build
WORKDIR /tar_build
RUN . /meta/env && tar -czf /artifacts/libpkcs11shim-${DISTRO_SHORT_NAME}-${PKG_ARCH}-${PKG_VERSION}${PKG_GITSUFFIX}.tar.gz usr

# build the APK package
# Add a non-root user for building the package
RUN adduser -D -G abuild builduser \
    && echo "builduser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

USER builduser
WORKDIR /home/builduser

# Copy pre-built files from the builder stage
COPY --from=builder --chown=builduser:abuild /build /home/builduser/pkgroot

# Create the APKBUILD file
RUN mkdir -p /home/builduser/apkbuild
WORKDIR /home/builduser/apkbuild

# Create the APK signing key (TODO: this should be mounted as a volume instead)
RUN mkdir -p .abuild
RUN abuild-keygen -a -n && echo "builduser@$(hostname)" > .abuild/identity
RUN sudo cp ~/.abuild/*.rsa.pub /etc/apk/keys/

RUN . /meta/env && cat <<EOF >APKBUILD
# Maintainer: $PKG_MAINTAINER
pkgname="libpkcs11shim-$DISTRO_SHORT_NAME-$PKG_ARCH"
pkgver=$PKG_VERSION
pkgrel=$PKG_RELEASE
_gitcommit=$PKG_GITCOMMIT
pkgdesc="a PKCS#11 shim library"
url="$REPO_URL"
arch="$PKG_ARCH"
license="LGPL-2.1"
makedepends="autoconf automake libtool pkgconf"
options="!check"

package() {
    mkdir -p "\$pkgdir"
    cp -r /home/builduser/pkgroot/* "\$pkgdir/"
}

EOF

RUN mkdir -p /home/builduser/packages \
    && echo "repository=/home/builduser/packages" >> ~/.abuild/abuild.conf

RUN sudo apk update && abuild -r && sudo cp /home/builduser/packages/builduser/$(arch)/*.apk /artifacts

# Final command to list the artifacts
CMD [ "find", "/artifacts", "-type", "f" ]
